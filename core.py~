#-*- coding: utf-8 -*-
"""
Tratamento de uma imagem.
"""
import operator
from collections import defaultdict
from decimal import Decimal
from PIL import Image
from utils import PixelAccessAux


class Imagem(object):
    """
    Abstração de uma Imagem.
    """

    def __init__(self, caminho_imagem, *args, **kwargs):
        """
        Inicialização da classe.
        """
        self.caminho_imagem = caminho_imagem
        self.imagem = Image.open(caminho_imagem).convert("RGB")
        self.pixels = self.imagem.load()
        self.filtros = Filtros(imagem=self)

        try:
            self.imagem.width, self.imagem.height = self.imagem.size
        except AttributeError:
            pass

        self.quantidade_pixels = (
            Decimal(self.imagem.height * self.imagem.width)
        )
        super(Imagem, self).__init__(*args, **kwargs)

    def _get_xy(self, x_inicio=0, y_inicio=0, x_final=None, y_final=None,
                sentido='horizontal'):
        """
        Retorna um generator das coordenadas (x, y) da imagem.
        """
        x_final = x_final or self.imagem.width
        y_final = y_final or self.imagem.height

        if sentido == 'horizontal':
            for x in range(x_inicio, x_final):
                for y in range(y_inicio, y_final):
                    yield (x, y)
        else:
            for y in range(y_inicio, y_final):
                for x in range(x_inicio, x_final):
                    yield (x, y)

    def _get_probabilidades(self, histograma):
        """
        Retorna as probabilidades para cada nível de cinza do histograma da
        imagem original.
        """
        probabilidades = defaultdict(lambda: 0)
        for tom_cinza, quantidade in histograma.iteritems():
            probabilidades[tom_cinza] = quantidade / self.quantidade_pixels
        return probabilidades

    def _get_novos_tons_cinza(self, probabilidades):
        """
        :return: Um dicionário do tipo: {tom_cinza: novo_tom_cinza}

        Retorna os novos tons de cinza que devem ser aplicados.
        """
        g = defaultdict(lambda: 0)
        probabilidade_acumulada = 0
        for tom_cinza, probabilidade in probabilidades.items():
            probabilidade_acumulada += probabilidade
            novo_tom_cinza = probabilidade_acumulada * 255
            g[tom_cinza] = int(Decimal(novo_tom_cinza).quantize(0))
        return g

    def salvar(self, novo_caminho_imagem=None):
        """
        Salva a imagem.
        """
        caminho_imagem = novo_caminho_imagem or self.caminho_imagem
        self.imagem.save(caminho_imagem)

    def converter_escala_cinza(self):
        """
        Converte uma imagem para escala de cinza.
        """
        for x, y in self._get_xy():
            pixel = self.pixels[x, y]
            r, g, b = self.pixels[x, y]
            tom_cinza = int(0.3 * r + 0.59 * g + 0.11 * b)
            self.pixels[x, y] = (tom_cinza, tom_cinza, tom_cinza)
        return self.pixels

    def get_histograma(self):
        """
        :return: {tom_cinza: quantidade_pixels, ...}

        Retorna o histograma da imagem.
        """
        histograma = defaultdict(lambda: 0)
        for x, y in self._get_xy():
            r, g, b = self.pixels[x, y]
            histograma[r] += 1
        return histograma

    def equalizar_imagem(self):
        """
        Equaliza a imagem em escala de cinza.
        """
        histograma = self.get_histograma()
        probabilidades = self._get_probabilidades(histograma)
        novos_tons = self._get_novos_tons_cinza(probabilidades)

        for x, y in self._get_xy():
            r, g, b = self.pixels[x, y]
            tom_cinza = novos_tons[r]
            self.pixels[x, y] = (tom_cinza, tom_cinza, tom_cinza)

    def aplicar_filtro(self, nome_filtro, *args, **kwargs):
        """
        Aplica um filtro na imagem.
        """
        getattr(self.filtros, nome_filtro)(*args, **kwargs)


class Filtros(object):
    """
    Filtros que podem ser aplicados na imagem.
    """

    def __init__(self, imagem):
        """
        Inicialização da classe.
        """
        self.imagem = imagem

    def _get_pontos_imagem(self, mascara, sentido='horizontal'):
        """
        Retorna os pontos da imagem, excluindo a borda.
        """
        # Busca os pares de pontos (x, y) da imagem, exceto os das bordas.
        pontos_matriz = self.imagem._get_xy(
            x_inicio=mascara.tamanho_borda,
            y_inicio=mascara.tamanho_borda,
            x_final=self.imagem.imagem.width - mascara.tamanho_borda,
            y_final=self.imagem.imagem.height - mascara.tamanho_borda,
            sentido=sentido
        )
        return pontos_matriz

    def _get_pontos_vizinhos(self, x, y, mascara):
        """
        Retorna os pontos vizinhos de um pixel, calculados com base no tamanho
        da máscara aplicada.
        """
        vizinhos = []
        for i in mascara.range_tamanho_borda:
            for j in mascara.range_tamanho_borda:
                vizinho = (
                    x - mascara.tamanho_borda + i,
                    y - mascara.tamanho_borda + j
                )
                vizinhos.append(vizinho)
        return vizinhos

    def correlacao(self, mascara):
        """
        Aplica o filtro de correlação.
        """
        matriz_aux = PixelAccessAux(imagem=self.imagem, mascara=mascara)

        for x, y in self._get_pontos_imagem(mascara=mascara):
            soma = 0
            for i in mascara.range_tamanho_borda:
                for j in mascara.range_tamanho_borda:
                    x_vizinho = x - mascara.tamanho_borda + i
                    y_vizinho = y - mascara.tamanho_borda + j
                    pixel_vizinho = self.imagem.pixels[x_vizinho, y_vizinho][0]

                    valor_mascara = mascara[i][j]
                    soma += pixel_vizinho * valor_mascara

            soma = int(soma)
            matriz_aux[x, y] = (soma, soma, soma)

        for x, y in self._get_pontos_imagem(mascara=mascara):
            self.imagem.pixels[x, y] = matriz_aux[x, y]

    def convolucao(self, mascara):
        """
        Aplica o filtro de convolução.
        """
        matriz_aux = PixelAccessAux(imagem=self.imagem, mascara=mascara)
        indice_invertido = mascara.range_tamanho_borda.reverse()

        for x, y in self._get_pontos_imagem(mascara=mascara):
            soma = 0
            for i in mascara.range_tamanho_borda:
                for j in mascara.range_tamanho_borda:
                    x_vizinho = x - mascara.tamanho_borda + i
                    y_vizinho = y - mascara.tamanho_borda + j
                    pixel_vizinho = self.imagem.pixels[x_vizinho, y_vizinho][0]

                    valor_mascara = mascara[i][indice_invertido[j]]
                    soma += pixel_vizinho * valor_mascara

            soma = int(soma)
            matriz_aux[x, y] = (soma, soma, soma)

        for x, y in self._get_pontos_imagem(mascara=mascara):
            self.imagem.pixels[x, y] = matriz_aux[x, y]

    def passa_alta(self, mascara):
        """
        Aplica o filtro de passa alta.
        """
        matriz_aux = PixelAccessAux(imagem=self.imagem, mascara=mascara)
        indice_invertido = list(mascara.range_tamanho_borda)

        # Aplica a máscara horizontalmente.
        for x, y in self._get_pontos_imagem(mascara=mascara):
            soma = 0
            for i in mascara.range_tamanho_borda:
                for j in mascara.range_tamanho_borda:
                    x_vizinho = x - mascara.tamanho_borda + i
                    y_vizinho = y - mascara.tamanho_borda + j
                    pixel_vizinho = self.imagem.pixels[x_vizinho, y_vizinho][0]

                    valor_mascara = mascara[i][j]
                    soma += pixel_vizinho * valor_mascara

            soma = int(soma)
            if soma < 0:
                soma = 0
            elif soma > 255:
                soma = 255
            matriz_aux[x, y] = (soma, soma, soma)

        # Aplica a máscara verticalmente.
        pontos_imagem = self._get_pontos_imagem(
            mascara=mascara,
            sentido='vertical'
        )
        for x, y in pontos_imagem:
            soma = 0
            for i in mascara.range_tamanho_borda:
                for j in mascara.range_tamanho_borda:
                    x_vizinho = x - mascara.tamanho_borda + i
                    y_vizinho = y - mascara.tamanho_borda + j
                    pixel_vizinho = matriz_aux[x_vizinho, y_vizinho][0]

                    valor_mascara = mascara[i][j]
                    soma += pixel_vizinho * valor_mascara

            soma = int(soma)
            if soma < 0:
                soma = 0
            elif soma > 255:
                soma = 255
            matriz_aux[x, y] = (soma, soma, soma)

        for x, y in self._get_pontos_imagem(mascara=mascara):
            self.imagem.pixels[x, y] = matriz_aux[x, y]

    def moda(self, mascara):
        """
        Aplica o filtro da moda.
        """
        matriz_aux = PixelAccessAux(imagem=self.imagem, mascara=mascara)

        for x, y in self._get_pontos_imagem(mascara=mascara):
            vizinhos = defaultdict(lambda: 0)
            pontos_vizinhos = self._get_pontos_vizinhos(x, y, mascara)
            for x_vizinho, y_vizinho in pontos_vizinhos:
                pixel_vizinho = self.imagem.pixels[x_vizinho, y_vizinho][0]
                vizinhos[pixel_vizinho] += 1

            moda = sorted(
                vizinhos.items(),
                key=operator.itemgetter(1),
                reverse=True
            )
            moda = int(moda[0][0])
            matriz_aux[x, y] = (moda, moda, moda)

        for x, y in self._get_pontos_imagem(mascara=mascara):
            self.imagem.pixels[x, y] = matriz_aux[x, y]

    def mediana(self, mascara):
        """
        Aplica o filtro da mediana.
        """
        matriz_aux = PixelAccessAux(imagem=self.imagem, mascara=mascara)

        for x, y in self._get_pontos_imagem(mascara=mascara):
            vizinhos = []
            pontos_vizinhos = self._get_pontos_vizinhos(x, y, mascara)
            for x_vizinho, y_vizinho in pontos_vizinhos:
                pixel_vizinho = self.imagem.pixels[x_vizinho, y_vizinho][0]
                vizinhos.append(pixel_vizinho)

            vizinhos.sort()
            ponto_mediano = mascara.dimensao / 2
            valor_mediano = int(vizinhos[ponto_mediano])
            matriz_aux[x, y] = (valor_mediano, valor_mediano, valor_mediano)

        for x, y in self._get_pontos_imagem(mascara=mascara):
            self.imagem.pixels[x, y] = matriz_aux[x, y]

    def media(self, mascara):
        """
        Aplica o filtro da média.
        """
        matriz_aux = PixelAccessAux(imagem=self.imagem, mascara=mascara)

        for x, y in self._get_pontos_imagem(mascara=mascara):
            soma = 0
            pontos_vizinhos = self._get_pontos_vizinhos(x, y, mascara)
            for x_vizinho, y_vizinho in pontos_vizinhos:
                pixel_vizinho = self.imagem.pixels[x_vizinho, y_vizinho][0]
                soma += pixel_vizinho

            media = int(soma / mascara.tamanho_mascara)
            matriz_aux[x, y] = (media, media, media)

        for x, y in self._get_pontos_imagem(mascara=mascara):
            self.imagem.pixels[x, y] = matriz_aux[x, y]


class Operacoes(object):
    """
    Aplica uma operação em uma imagem.
    """

    def __init__(self, imagem):
        """
        Inicialização da classe.
        """
        self.imagem = imagem
        self.bit_not = lambda x: (1 << x.bit_length()) - (x+1)

    def operador_not(self):
        """
        Inverte os pixels da imagem.
        Implementação do operador lógico NOT.
        """
        for x, y in self.imagem._get_xy():
            pixel = self.imagem.pixels[x, y][0]
            pixel_not = self.bit_not(pixel)
            self.imagem.pixels[x, y] = (pixel_not, pixel_not, pixel_not)

    def operador_and(self, segunda_imagem=None):
        """
        Implementação do operador lógico AND.
        """
        minimo_x = min(self.imagem.imagem.width, segunda_imagem.imagem.width)
        minimo_y = min(self.imagem.imagem.height, segunda_imagem.imagem.height)
        pixels = self.imagem._get_xy(x_final=minimo_x, y_final=minimo_y)

        for x, y in pixels:
            pixel = self.imagem.pixels[x, y][0]
            pixel_segunda_imagem = segunda_imagem.pixels[x, y][0]
            pixel_and = pixel & pixel_segunda_imagem
            self.imagem.pixels[x, y] = (pixel_and, pixel_and, pixel_and)

    def operador_or(self, segunda_imagem=None):
        """
        Implementação do operador lógico OR.
        """
        minimo_x = min(self.imagem.imagem.width, segunda_imagem.imagem.width)
        minimo_y = min(self.imagem.imagem.height, segunda_imagem.imagem.height)
        pixels = self.imagem._get_xy(x_final=minimo_x, y_final=minimo_y)

        for x, y in pixels:
            pixel = self.imagem.pixels[x, y][0]
            pixel_segunda_imagem = segunda_imagem.pixels[x, y][0]
            pixel_and = pixel | pixel_segunda_imagem
            self.imagem.pixels[x, y] = (pixel_and, pixel_and, pixel_and)

    def operador_soma(self, segunda_imagem=None):
        """
        Implementação do operador aritmético de soma (+).
        """
        minimo_x = min(self.imagem.imagem.width, segunda_imagem.imagem.width)
        minimo_y = min(self.imagem.imagem.height, segunda_imagem.imagem.height)
        pixels = self.imagem._get_xy(x_final=minimo_x, y_final=minimo_y)

        for x, y in pixels:
            pixel = self.imagem.pixels[x, y][0]
            pixel_segunda_imagem = segunda_imagem.pixels[x, y][0]
            novo_pixel = pixel + pixel_segunda_imagem
            if novo_pixel > 255:
                novo_pixel = 255
            self.imagem.pixels[x, y] = (novo_pixel, novo_pixel, novo_pixel)

    def operador_subtracao(self, segunda_imagem=None):
        """
        Implementação do operador aritmético de subtracao (-).
        """
        minimo_x = min(self.imagem.imagem.width, segunda_imagem.imagem.width)
        minimo_y = min(self.imagem.imagem.height, segunda_imagem.imagem.height)
        pixels = self.imagem._get_xy(x_final=minimo_x, y_final=minimo_y)

        a = file('/home/reit/prad/npdu/mmdemicheli/Downloads/a.txt', 'w+')

        for x, y in pixels:
            pixel = self.imagem.pixels[x, y][0]
            pixel_segunda_imagem = segunda_imagem.pixels[x, y][0]
            novo_pixel = pixel - pixel_segunda_imagem
            a.write('%s - %s = %s' % (pixel, pixel_segunda_imagem, novo_pixel))
            if novo_pixel < 0:
                novo_pixel = 0
            self.imagem.pixels[x, y] = (novo_pixel, novo_pixel, novo_pixel)

    def operador_multiplicacao(self, segunda_imagem=None):
        """
        Implementação do operador aritmético de multiplição (*).
        """
        minimo_x = min(self.imagem.imagem.width, segunda_imagem.imagem.width)
        minimo_y = min(self.imagem.imagem.height, segunda_imagem.imagem.height)
        pixels = self.imagem._get_xy(x_final=minimo_x, y_final=minimo_y)

        for x, y in pixels:
            pixel = self.imagem.pixels[x, y][0]
            pixel_segunda_imagem = segunda_imagem.pixels[x, y][0]
            novo_pixel = pixel * pixel_segunda_imagem
            if novo_pixel > 255:
                novo_pixel = 255
            self.imagem.pixels[x, y] = (novo_pixel, novo_pixel, novo_pixel)

    def operador_divisao(self, segunda_imagem=None):
        """
        Implementação do operador aritmético de divisão (/).
        """
        minimo_x = min(self.imagem.imagem.width, segunda_imagem.imagem.width)
        minimo_y = min(self.imagem.imagem.height, segunda_imagem.imagem.height)
        pixels = self.imagem._get_xy(x_final=minimo_x, y_final=minimo_y)

        for x, y in pixels:
            pixel = self.imagem.pixels[x, y][0]
            pixel_segunda_imagem = segunda_imagem.pixels[x, y][0]
            if pixel_segunda_imagem > 0:
                novo_pixel = pixel / pixel_segunda_imagem
                print (pixel, pixel_segunda_imagem, novo_pixel)
                self.imagem.pixels[x, y] = (novo_pixel, novo_pixel, novo_pixel)
